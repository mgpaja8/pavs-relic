version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: api/Dockerfile
    ports:
      - "3001:3001"
    networks:
      - app-network

  frontend:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  # Map port 3000 to enable hot-reloading
    volumes:
      - ./webapp:/app  # Mount local webapp directory into the container
    environment:
      - NODE_ENV=development  # Set NODE_ENV to development
    networks:
      - app-network

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: reallygoodpassword
      POSTGRES_DB: pavsrelic
    ports:
      - "15432:5432"
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data

  migrate:
    image: golang:1.20-alpine
    volumes:
      - ./api/db/migrations:/migrations  # Mount migrations directory into migrate container
      - ./api/db/dbconf.yml:/db/dbconf.yml  # Mount dbconf.yml into the container
    working_dir: /migrations
    entrypoint: >
      /bin/sh -c "
        apk add --no-cache git curl postgresql-client &&
        go install github.com/pressly/goose/v3/cmd/goose@latest &&
        echo 'Waiting for PostgreSQL to be ready...' &&
        until pg_isready -h postgres -p 5432; do
          echo 'PostgreSQL is unavailable - sleeping';
          sleep 1;
        done &&
        echo 'PostgreSQL is up - executing migrations' &&
        goose -dir /migrations postgres 'user=postgres dbname=pavsrelic password=reallygoodpassword sslmode=disable host=postgres port=5432' up
      "
    depends_on:
      - postgres
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
